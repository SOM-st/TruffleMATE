<project name="som" basedir="." default="compile"
	xmlns:unless="ant:unless"
	xmlns:if="ant:if"
	xmlns:jacoco="antlib:org.jacoco.ant">

    <property name="src.dir"       value="src"/>
    <property name="src.dirMate"   value="MateExtensions"/>
    <property name="src_gen.dir"   value="src_gen"/>
    <property name="test.dir"      value="tests"/>
    <property name="lib.dir"       location="libs" />
    <property name="sdk.build"     location="${lib.dir}/graal/sdk/mxbuild/dists" />
    <property name="truffle.dir"   location="${lib.dir}/graal/truffle" />
	<property name="graal.dir" 	   location="${lib.dir}/graal/compiler" />
	<property name="truffle.build" location="${truffle.dir}/mxbuild/dists" />
	<property name="bd.dir"        location="${lib.dir}/black-diamonds/" />
    <property name="junit.version" value="4.12" />
    <property name="checkstyle.version" value="8.8" />

    <property environment="env"/>

    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>

    <path id="project.classpath">
        <pathelement location="${classes.dir}" />
        <pathelement location="${test.dir}" />
        <pathelement location="${lib.dir}/junit-${junit.version}.jar" />
        <pathelement location="${lib.dir}/hamcrest-core-1.3.jar" />
    	<pathelement location="${lib.dir}/gson-2.7.jar" />
        <pathelement location="${sdk.build}/graal-sdk.jar" />
        <pathelement location="${truffle.build}/truffle-api.jar" />
        <pathelement location="${truffle.build}/truffle-dsl-processor.jar" />
		<pathelement location="${truffle.build}/truffle-debug.jar" />
    	<pathelement location="${truffle.build}/truffle-tck.jar" />
    	<pathelement location="${lib.dir}/json/build/minimal-json.jar" />
    	<pathelement location="${bd.dir}/build/classes" />
    </path>
	
    <target name="clean" description="Remove build directories and generated code">
        <delete dir="${build.dir}"/>
        <delete dir="${src_gen.dir}"/>
    </target>

    <target name="eclipseformat">
      <pathconvert pathsep=" " property="javafiles">
        <fileset dir="${src.dir}">
          <include name="**/*.java"/>
        </fileset>
        <fileset dir="${test.dir}">
          <include name="**/*.java"/>
        </fileset>
      </pathconvert>
      <exec executable="${env.ECLIPSE_EXE}" dir="${basedir}">
          <arg value="-nosplash"/>
          <arg value="-application"/>
          <arg value="-consolelog"/>
          <arg value="-data"/>
          <arg value="${basedir}"/>
          <arg value="-vm"/>
          <arg value="${env.JAVA_HOME}/bin/java"/>
          <arg value="org.eclipse.jdt.core.JavaCodeFormatter"/>
          <arg value="-config"/>
          <arg value="${basedir}/.settings/org.eclipse.jdt.core.prefs"/>
          <arg line="${javafiles}"/>
      </exec>
      <exec executable="git" dir="${basedir}" failonerror="true">
          <arg value="status" />
          <arg value="*.java" />
      </exec>
      <exec executable="git" dir="${basedir}" failonerror="true">
          <arg value="diff-index" />
          <arg value="--quiet" />
          <arg value="HEAD" />
      </exec>
    </target>

    <target name="clobber" description="Do clean, and also clean truffle build" depends="clean">
        <exec executable="../../mx/mx" dir="${truffle.dir}">
            <arg value="clean"/>
        </exec>
    	<ant dir="${bd.dir}" useNativeBasedir="true" target="clean" inheritAll="false"/>
    </target>
    
    <target name="check-core-lib-available">
        <available file="core-lib/.git" property="core-lib.present"/>
    </target>
    
	<target name="core-lib" depends="check-core-lib-available"
            unless="core-lib.present">
      <exec executable="git">
        <arg value="submodule" />
        <arg value="update" />
        <arg value="--init" />
      </exec>
    </target>

    <target name="truffle-libs" >
        <exec executable="../../mx/mx" dir="${truffle.dir}">
            <arg value="build"/>
        	<arg value="--no-native"/>
        </exec>
    </target>
	
	<target name="graal" >
        <exec executable="../../mx/mx" dir="${graal.dir}">
        	<arg value="build"/>
        	<arg value="--no-native"/>
        </exec>
    </target>
	
	<target name="bd-libs"> <!-- implicit dependency on truffle-libs -->
        <ant dir="${bd.dir}" useNativeBasedir="true" target="compile-nodeps" inheritAll="false">
        	<property name="lib.dir" value="${lib.dir}" />
        	<property name="sdk.build"  value="${sdk.build}" />
            <property name="truffle.dir" value="${truffle.build}" />
        	<property name="truffle.build" value="${truffle.build}" />
        </ant>
    </target>
	
	<target name="minimal-json-lib" depends="core-lib">		
		<subant buildpath="libs/json" target="jar" failonerror="true" />		
	</target>
	
	<target name="libs" depends="core-lib, truffle-libs, graal, minimal-json-lib, bd-libs">
        <get src="https://repo1.maven.org/maven2/junit/junit/${junit.version}/junit-${junit.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/junit-${junit.version}.jar" />
        <get src="https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
            usetimestamp="true"
            dest="${lib.dir}/hamcrest-core-1.3.jar" />
		<get src="https://repo1.maven.org/maven2/com/google/code/gson/gson/2.7/gson-2.7.jar"
			usetimestamp="true"
		    dest="${lib.dir}/gson-2.7.jar" />
    </target>

	<target name="checkstyle-jar">
        <get src="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${checkstyle.version}/checkstyle-${checkstyle.version}-all.jar"
            usetimestamp="true"
            dest="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
    </target>

    <target name="checkstyle" depends="checkstyle-jar" description="Check Code with Checkstyle">
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
        <checkstyle config=".checkstyle_checks.xml">
          <fileset dir="src" includes="**/*.java"/>
          <formatter type="plain"/>
        </checkstyle>
    </target>
	
	<target name="compile" depends="libs" description="Compile TruffleSOM">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${src_gen.dir}" />
        <javac includeantruntime="false" destdir="${classes.dir}" debug="true">
          <src path="${src.dir}"/>
          <src path="${src.dirMate}"/>
          <src path="${src_gen.dir}"/>
          <classpath refid="project.classpath" />
          <compilerarg line="-XDignore.symbol.file" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${src_gen.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${test.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <exclude name="**/TruffleMateTCK.java"/>
        </javac>
    </target>

    <target name="jar" depends="compile" description="Package as JAR">
        <jar destfile="${build.dir}/som.jar" basedir="${classes.dir}"></jar>
    </target>

    <target name="test" depends="compile" description="Execute tests">
        <junit haltonerror="false" haltonfailure="false" failureproperty="test.failed"
            outputtoformatters="true">
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <classpath refid="project.classpath" />
            <batchtest fork="yes" filtertrace="false">
              <fileset dir="${test.dir}">
                  <include name="**/*Test*.java"/>
              </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>
    	<fail message="Test failure detected, check test results." if="test.failed" />
    </target>
    <target name="tests" depends="test"/>
</project>
