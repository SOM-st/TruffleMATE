From 9cb374ea149e87c5c529462d93dfd52edad83310 Mon Sep 17 00:00:00 2001
From: Guido Chari <charig@gmail.com>
Date: Tue, 7 Aug 2018 10:27:55 +0200
Subject: [PATCH] Patch for adding support to dynamically addding/removing
 instrumentation nodes

---
 .../instrumentation/test/InstrumentationTest.java  | 117 +++++++++++++++++++++
 .../truffle/api/instrumentation/EventContext.java  |  78 ++++++++++++++
 .../instrumentation/InstrumentationHandler.java    |  37 ++++++-
 .../truffle/api/instrumentation/Instrumenter.java  |   1 +
 .../truffle/api/instrumentation/ProbeNode.java     |  18 ++++
 5 files changed, 250 insertions(+), 1 deletion(-)

diff --git a/truffle/src/com.oracle.truffle.api.instrumentation.test/src/com/oracle/truffle/api/instrumentation/test/InstrumentationTest.java b/truffle/src/com.oracle.truffle.api.instrumentation.test/src/com/oracle/truffle/api/instrumentation/test/InstrumentationTest.java
index daed5aa264..f869e45f56 100644
--- a/truffle/src/com.oracle.truffle.api.instrumentation.test/src/com/oracle/truffle/api/instrumentation/test/InstrumentationTest.java
+++ b/truffle/src/com.oracle.truffle.api.instrumentation.test/src/com/oracle/truffle/api/instrumentation/test/InstrumentationTest.java
@@ -40,6 +40,7 @@ import java.io.PipedOutputStream;
 import java.io.Reader;
 import java.nio.CharBuffer;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -1208,6 +1209,122 @@ public class InstrumentationTest extends AbstractInstrumentationTest {
         }
     }
 
+    /*
+     * Test that parsing and executing foreign languages with context work.
+     */
+    @Test
+    public void testTestFindParentEventNode1() throws IOException {
+        InstrumentationTest.findParentNodes = new ArrayList<>();
+        List<FindParentEventNode> nodes = InstrumentationTest.findParentNodes;
+
+        assureEnabled(engine.getInstruments().get("testTestFindParentEventNode1"));
+        run("STATEMENT(EXPRESSION,EXPRESSION(STATEMENT))");
+
+        // assert no assertions during execution
+        Assert.assertTrue("Errors during execution: " + getErr(), getErr().isEmpty());
+
+        Assert.assertEquals(4, nodes.size());
+
+        FindParentEventNode node0 = nodes.get(0);
+        FindParentEventNode node1 = nodes.get(1);
+        FindParentEventNode node2 = nodes.get(2);
+        FindParentEventNode node3 = nodes.get(3);
+
+        Assert.assertNull(node0.parentNode);
+        Assert.assertSame(node1.parentNode, node0);
+        Assert.assertSame(node2.parentNode, node0);
+        Assert.assertSame(node3.parentNode, node2);
+
+        Assert.assertTrue(node0.beforeChildren.get(0).isEmpty());
+        Assert.assertTrue(node1.beforeChildren.get(0).isEmpty());
+        Assert.assertTrue(node2.beforeChildren.get(0).isEmpty());
+        Assert.assertTrue(node3.beforeChildren.get(0).isEmpty());
+
+        Assert.assertEquals(Arrays.asList(node1, node2), node0.afterChildren.get(0));
+        Assert.assertEquals(Arrays.asList(), node1.afterChildren.get(0));
+        Assert.assertEquals(Arrays.asList(node3), node2.afterChildren.get(0));
+        Assert.assertEquals(Arrays.asList(), node3.afterChildren.get(0));
+
+        run("STATEMENT(EXPRESSION,EXPRESSION(STATEMENT))");
+        // assert no assertions during execution
+        Assert.assertTrue("Errors during execution: " + getErr(), getErr().isEmpty());
+
+        Assert.assertEquals(4, nodes.size());
+
+        node0 = nodes.get(0);
+        node1 = nodes.get(1);
+        node2 = nodes.get(2);
+        node3 = nodes.get(3);
+
+        Assert.assertNull(node0.parentNode);
+        Assert.assertSame(node1.parentNode, node0);
+        Assert.assertSame(node2.parentNode, node0);
+        Assert.assertSame(node3.parentNode, node2);
+
+        Assert.assertEquals(Arrays.asList(node1, node2), node0.beforeChildren.get(1));
+        Assert.assertEquals(Arrays.asList(), node1.beforeChildren.get(1));
+        Assert.assertEquals(Arrays.asList(node3), node2.beforeChildren.get(1));
+        Assert.assertEquals(Arrays.asList(), node3.beforeChildren.get(1));
+
+        Assert.assertEquals(Arrays.asList(node1, node2), node0.afterChildren.get(1));
+        Assert.assertEquals(Arrays.asList(), node1.afterChildren.get(1));
+        Assert.assertEquals(Arrays.asList(node3), node2.afterChildren.get(1));
+        Assert.assertEquals(Arrays.asList(), node3.afterChildren.get(1));
+
+    }
+
+    @Registration(id = "testTestFindParentEventNode1", services = Object.class)
+    public static class TestFindParentEventNode1 extends TruffleInstrument {
+
+        static int parentNodesFound = 0;
+
+        @Override
+        protected void onCreate(final Env env) {
+            env.getInstrumenter().attachFactory(SourceSectionFilter.newBuilder().tagIs(InstrumentationTestLanguage.STATEMENT, InstrumentationTestLanguage.EXPRESSION).build(),
+                            new FindParentExecutionEventNodeFactory());
+        }
+    }
+
+    static class FindParentExecutionEventNodeFactory implements ExecutionEventNodeFactory {
+        public ExecutionEventNode create(final EventContext context) {
+            return new FindParentEventNode(context, this);
+        }
+    }
+
+    static List<FindParentEventNode> findParentNodes = new ArrayList<>();
+
+    static class FindParentEventNode extends ExecutionEventNode {
+
+        private final EventContext context;
+        private final ExecutionEventNodeFactory factory;
+
+        FindParentEventNode(EventContext context, ExecutionEventNodeFactory factory) {
+            this.context = context;
+            this.factory = factory;
+            findParentNodes.add(this);
+        }
+
+        ExecutionEventNode parentNode;
+        List<List<ExecutionEventNode>> beforeChildren = new ArrayList<>();
+        List<List<ExecutionEventNode>> afterChildren = new ArrayList<>();
+
+        @Override
+        protected void onEnter(VirtualFrame frame) {
+            ExecutionEventNode parent = context.findParentEventNode(factory);
+            if (this.parentNode != null) {
+                Assert.assertSame(parent, parentNode);
+            }
+            this.parentNode = parent;
+            this.beforeChildren.add(context.findChildEventNodes(factory));
+        }
+
+        @Override
+        protected void onReturnValue(VirtualFrame frame, Object result) {
+            Assert.assertSame(parentNode, context.findParentEventNode(factory));
+            this.afterChildren.add(context.findChildEventNodes(factory));
+        }
+    }
+
     /*
      * Tests for debugger or any other clients that cancel execution while halted
      */
diff --git a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/EventContext.java b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/EventContext.java
index 23c9ef771f..f772668d88 100644
--- a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/EventContext.java
+++ b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/EventContext.java
@@ -25,7 +25,10 @@
 package com.oracle.truffle.api.instrumentation;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 import java.util.Iterator;
 import java.util.Objects;
 
@@ -33,6 +36,7 @@ import com.oracle.truffle.api.CallTarget;
 import com.oracle.truffle.api.CompilerAsserts;
 import com.oracle.truffle.api.CompilerDirectives;
 import com.oracle.truffle.api.CompilerDirectives.CompilationFinal;
+import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
 import com.oracle.truffle.api.TruffleLanguage.Env;
 import com.oracle.truffle.api.frame.VirtualFrame;
 import com.oracle.truffle.api.instrumentation.InstrumentationHandler.AccessorInstrumentHandler;
@@ -312,6 +316,80 @@ public final class EventContext {
         return new UnwindException(info, unwindBinding);
     }
 
+    /**
+     * Returns the first found parent {@link ExecutionEventNode event node} created from a given
+     * {@link ExecutionEventNodeFactory factory}. If multiple
+     * {@link Instrumenter#attachFactory(SourceSectionFilter, ExecutionEventNodeFactory) bindings}
+     * were created with a single {@link ExecutionEventNodeFactory factory} instance then the first
+     * ExecutionEventNode which is found is returned in the order of event binding attachment.
+     *
+     * @param factory a event node factory for which to return the first event node
+     * @return the first event node found in the order of event binding attachment
+     * @since 0.13
+     */
+    @TruffleBoundary
+    public ExecutionEventNode findParentEventNode(final ExecutionEventNodeFactory factory) {
+        Node parent = getInstrumentedNode().getParent();
+        while ((parent = parent.getParent()) != null) {
+            ExecutionEventNode eventNode = findEventNode(factory, parent);
+            if (eventNode != null) {
+                return eventNode;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * @return an event node from the direct parent, or null.
+     * @since 0.13
+     */
+    @TruffleBoundary
+    public ExecutionEventNode findDirectParentEventNode(final ExecutionEventNodeFactory factory) {
+        Node parent = getInstrumentedNode().getParent();
+
+        assert parent instanceof com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode;  // this is the wrapper of the current node
+        parent = parent.getParent();           // this is the parent node
+        parent = parent.getParent();           // this is the wrapper of the parent node
+        return findEventNode(factory, parent);
+    }
+
+    /**
+     * Returns all first-level child event nodes created from a given
+     * {@link ExecutionEventNodeFactory factory}.
+     *
+     * @param factory an event node factory for which to return all first-level children
+     * @return all first-level children that were created from a given factory
+     * @since 0.13
+     */
+    @TruffleBoundary
+    public List<ExecutionEventNode> findChildEventNodes(final ExecutionEventNodeFactory factory) {
+        final List<ExecutionEventNode> eventNodes = new ArrayList<>();
+        Node instrumentedNode = getInstrumentedNode();
+        // TODO ideally one could use a NodeListener instead of the recursive algortihm.
+        // Unfortunately returning false in NodeVisitor#visit does not continue traversing all
+        // parents children but stops visitation completely. Bug!?
+        collectEventNodes(eventNodes, factory, instrumentedNode);
+        return Collections.unmodifiableList(eventNodes);
+    }
+
+    private void collectEventNodes(List<ExecutionEventNode> eventNodes, ExecutionEventNodeFactory factory, Node node) {
+        for (Node child : node.getChildren()) {
+            ExecutionEventNode eventNode = findEventNode(factory, child);
+            if (eventNode != null) {
+                eventNodes.add(eventNode);
+            } else if (child != null) {
+                collectEventNodes(eventNodes, factory, child);
+            }
+        }
+    }
+
+    private static ExecutionEventNode findEventNode(ExecutionEventNodeFactory factory, Node node) {
+        if (node instanceof com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode) {
+            return ((com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode) node).getProbeNode().findEventNode(factory);
+        }
+        return null;
+    }
+
     /*
      * TODO (chumer) a way to parse code in the current language and return something like a node
      * that is directly embeddable into the AST as a @Child.
diff --git a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/InstrumentationHandler.java b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/InstrumentationHandler.java
index 4ca5db2bd2..fdf01db5e3 100644
--- a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/InstrumentationHandler.java
+++ b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/InstrumentationHandler.java
@@ -73,10 +73,12 @@ import com.oracle.truffle.api.source.SourceSection;
  * Central coordinator class for the Truffle instrumentation framework. Allocated once per
  * {@linkplain org.graalvm.polyglot.Engine engine}.
  */
-final class InstrumentationHandler {
+public final class InstrumentationHandler {
 
     /* Enable trace output to stdout. */
     static final boolean TRACE = Boolean.getBoolean("truffle.instrumentation.trace");
+    
+    private static InstrumentationHandler globalHandler;
 
     private final Object sourceVM;
 
@@ -136,6 +138,24 @@ final class InstrumentationHandler {
         this.err = err;
         this.in = in;
         this.engineInstrumenter = new EngineInstrumenter();
+        globalHandler = this;
+    }
+
+    public static void insertInstrumentationWrapper(Node instrumentableNode) {
+        insertInstrumentationWrapper(instrumentableNode, instrumentableNode.getSourceSection());
+    }
+
+    public static void insertInstrumentationWrapper(Node instrumentableNode, SourceSection sourceSection) {
+        assert globalHandler != null : "InstrumentationHandler not yet initialized";
+
+        Node node;
+        if (instrumentableNode instanceof com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode) {
+            node = ((com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode) instrumentableNode).getDelegateNode();
+            invalidateWrapperImpl((com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode) instrumentableNode, node);
+        } else {
+            node = instrumentableNode;
+            globalHandler.insertWrapper(node, sourceSection);
+        }
     }
 
     Object getSourceVM() {
@@ -844,6 +864,7 @@ final class InstrumentationHandler {
     @SuppressWarnings({"unchecked", "deprecation"})
     private void insertWrapperImpl(Node node, SourceSection sourceSection) {
         Node parent = node.getParent();
+        assert !(node instanceof com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode);
         if (parent instanceof com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode) {
             // already wrapped, need to invalidate the wrapper something changed
             invalidateWrapperImpl((com.oracle.truffle.api.instrumentation.InstrumentableFactory.WrapperNode) parent, node);
@@ -1466,6 +1487,11 @@ final class InstrumentationHandler {
             return queryTagsImpl(node, null);
         }
 
+        @Override
+        public boolean isTaggedWith(Node node, Class<?> tag) {
+            return AccessorInstrumentHandler.nodesAccess().isTaggedWith(node, tag);
+        }
+
         @Override
         void verifyFilter(SourceSectionFilter filter) {
         }
@@ -1611,6 +1637,10 @@ final class InstrumentationHandler {
             throw new UnsupportedOperationException("Not supported in engine instrumenter.");
         }
 
+        @Override
+        public boolean isTaggedWith(Node node, Class<?> tag) {
+            return AccessorInstrumentHandler.nodesAccess().isTaggedWith(node, tag);
+        }
     }
 
     /**
@@ -1652,6 +1682,11 @@ final class InstrumentationHandler {
         public Set<Class<?>> queryTags(Node node) {
             return queryTagsImpl(node, languageInfo);
         }
+        
+        @Override
+        public boolean isTaggedWith(Node node, Class<?> tag) {
+            return AccessorInstrumentHandler.nodesAccess().isTaggedWith(node, tag);
+        }
 
         @Override
         void verifyFilter(SourceSectionFilter filter) {
diff --git a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/Instrumenter.java b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/Instrumenter.java
index ef2e77c3db..044712c6ac 100644
--- a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/Instrumenter.java
+++ b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/Instrumenter.java
@@ -362,4 +362,5 @@ public abstract class Instrumenter {
      */
     public abstract Set<Class<?>> queryTags(Node node);
 
+    public abstract boolean isTaggedWith(Node node, Class<?> tag);
 }
diff --git a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/ProbeNode.java b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/ProbeNode.java
index 589042d52d..1a2b86d067 100644
--- a/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/ProbeNode.java
+++ b/truffle/src/com.oracle.truffle.api.instrumentation/src/com/oracle/truffle/api/instrumentation/ProbeNode.java
@@ -327,6 +327,24 @@ public final class ProbeNode extends Node {
         }
     }
 
+    ExecutionEventNode findEventNode(final ExecutionEventNodeFactory factory) {
+        if (version != null && version.isValid() && chain != null) {
+            return findEventNodeInChain(factory);
+        }
+        return null;
+    }
+
+    private ExecutionEventNode findEventNodeInChain(ExecutionEventNodeFactory factory) {
+        EventChainNode currentChain = this.chain;
+        while (currentChain != null) {
+            if (currentChain.binding.getElement() == factory) {
+                return ((EventProviderChainNode) currentChain).eventNode;
+            }
+            currentChain = currentChain.next;
+        }
+        return null;
+    }
+
     EventChainNode lazyUpdate(VirtualFrame frame) {
         Assumption localVersion = this.version;
         if (localVersion == null || !localVersion.isValid()) {
-- 
2.15.2 (Apple Git-101.1)

